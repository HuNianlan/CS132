<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.6//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_6.dtd'>
<nta>
	<declaration>// Place global declarations here.
const int N = 2;

typedef int[0,N-1] ID;
typedef int[0,3] FLOOR;
typedef bool TARGETS[4];
typedef int STATE;
typedef int DIRECTION;

STATE status[N] = {2, 2};
DIRECTION direction[N] = {2, 2};
FLOOR current_floor[N] = {1, 1};
TARGETS target_floor[N] = {{false, false, false, false}, {false, false, false, false}};
TARGETS target_up[N] = {{false, false, false, false}, {false, false, false, false}};
TARGETS target_down[N] = {{false, false, false, false}, {false, false, false, false}};

broadcast chan open_door[N], close_door[N];
broadcast chan down[N], up[N];

clock gclk;
</declaration>
	<template>
		<name>SystemProcessor</name>
		<declaration>clock t;

int checkDirection(ID id) {
    return direction[id];
}

bool checkOpen(ID id) {
    return status[id] == 3 or status[id] == 4;
}

int i = 0;
int distance = 100;
FLOOR next_floor = 0;
void updateDirection(ID id) {
    if (direction[id] == 2) {
        for (i = current_floor[id]; i &lt; 4; i++) {
            if (target_up[id][i] or target_down[id][i]) {
                direction[id] = 0;
                return;
            }
        }
        for (i = current_floor[id]; i &gt; -1; i--) {
            if (target_up[id][i] or target_down[id][i]) {
                direction[id] = 1;
                return;
            }
        }
        next_floor = current_floor[id];
        distance = 10;
        for (i = 0; i &lt; 4; i++) {
            if (target_floor[id][i] and abs(i - current_floor[id]) &lt; distance) {
                distance = abs(i - current_floor[id]);
                next_floor = i;
            }
        }
        if (next_floor &lt; current_floor[id]) {
            direction[id] = 1;
        } else if (next_floor &gt; current_floor[id]) {
            direction[id] = 0;
        }
    } else if (direction[id] == 0) {
        for (i = current_floor[id]; i &lt; 4; i++) {
            if (target_floor[id][i] or target_up[id][i] or target_down[id][i]) {
                return;
            }
        }
        for (i = current_floor[id]; i &gt; -1; i--) {
            if (target_floor[id][i] or target_up[id][i] or target_down[id][i]) {
                direction[id] = 1;
                return;
            }
        }
        direction[id] = 2;
    } else if (direction[id] == 1) {
        for (i = current_floor[id]; i &gt; -1; i--) {
            if (target_floor[id][i] or target_up[id][i] or target_down[id][i]) {
                return;
            }
        }
        for (i = current_floor[id]; i &lt; 4; i++) {
            if (target_floor[id][i] or target_up[id][i] or target_down[id][i]) {
                direction[id] = 0;
                return;
            }
        }
        direction[id] = 2;
    }
}</declaration>
		<location id="id0" x="-306" y="42">
			<label kind="invariant" x="-323" y="9">t&lt;=1</label>
		</location>
		<location id="id1" x="-187" y="42">
			<name x="-246" y="59">Check_elevator_0</name>
			<committed/>
		</location>
		<location id="id2" x="425" y="42">
			<committed/>
		</location>
		<location id="id3" x="-187" y="-119">
			<committed/>
		</location>
		<location id="id4" x="136" y="42">
			<name x="68" y="59">Check_elevator_1</name>
			<committed/>
		</location>
		<location id="id5" x="69" y="-119">
			<committed/>
		</location>
		<location id="id6" x="196" y="-119">
			<committed/>
		</location>
		<location id="id7" x="425" y="-119">
			<committed/>
		</location>
		<init ref="id0"/>
		<transition id="id8">
			<source ref="id6"/>
			<target ref="id7"/>
			<label kind="guard" x="229" y="-136">checkDirection(1)==0</label>
			<label kind="synchronisation" x="272" y="-119">up[1]!</label>
		</transition>
		<transition id="id9">
			<source ref="id3"/>
			<target ref="id5"/>
			<label kind="guard" x="-144" y="-136">checkDirection(0)==0</label>
			<label kind="synchronisation" x="-102" y="-119">up[0]!</label>
		</transition>
		<transition id="id10">
			<source ref="id6"/>
			<target ref="id7"/>
			<label kind="guard" x="229" y="-195">checkDirection(1)==2</label>
			<nail x="221" y="-170"/>
			<nail x="391" y="-170"/>
		</transition>
		<transition id="id11">
			<source ref="id6"/>
			<target ref="id7"/>
			<label kind="guard" x="229" y="-93">checkDirection(1)==1</label>
			<label kind="synchronisation" x="254" y="-76">down[1]!</label>
			<nail x="229" y="-76"/>
			<nail x="399" y="-76"/>
		</transition>
		<transition id="id12">
			<source ref="id3"/>
			<target ref="id5"/>
			<label kind="guard" x="-145" y="-195">checkDirection(0)==2</label>
			<nail x="-162" y="-170"/>
			<nail x="34" y="-170"/>
		</transition>
		<transition id="id13">
			<source ref="id3"/>
			<target ref="id5"/>
			<label kind="guard" x="-144" y="-93">checkDirection(0)==1</label>
			<label kind="synchronisation" x="-120" y="-76">down[0]!</label>
			<nail x="-162" y="-76"/>
			<nail x="34" y="-76"/>
		</transition>
		<transition id="id14">
			<source ref="id7"/>
			<target ref="id2"/>
			<label kind="assignment" x="263" y="-34">updateDirection(1)</label>
		</transition>
		<transition id="id15">
			<source ref="id4"/>
			<target ref="id6"/>
			<label kind="guard" x="170" y="-51">!checkOpen(1)</label>
		</transition>
		<transition id="id16">
			<source ref="id5"/>
			<target ref="id4"/>
			<label kind="assignment" x="-51" y="-34">updateDirection(0)</label>
		</transition>
		<transition id="id17">
			<source ref="id2"/>
			<target ref="id0"/>
			<label kind="assignment" x="9" y="76">t=0</label>
			<nail x="425" y="93"/>
			<nail x="-306" y="93"/>
		</transition>
		<transition id="id18">
			<source ref="id4"/>
			<target ref="id2"/>
			<label kind="guard" x="229" y="17">checkOpen(1)</label>
		</transition>
		<transition id="id19">
			<source ref="id1"/>
			<target ref="id4"/>
			<label kind="guard" x="-93" y="17">checkOpen(0)</label>
		</transition>
		<transition id="id20">
			<source ref="id1"/>
			<target ref="id3"/>
			<label kind="guard" x="-306" y="-51">!checkOpen(0)</label>
		</transition>
		<transition id="id21">
			<source ref="id0"/>
			<target ref="id1"/>
			<label kind="guard" x="-263" y="17">t&gt;=1</label>
		</transition>
	</template>
	<template>
		<name>User</name>
		<declaration>int i = 0;

int compute_callup_time(ID id, FLOOR floor_) {
    if (direction[id] == 2) {
        return abs(current_floor[id] - floor_);
    } else if (direction[id] == 1) {
        FLOOR min_floor = current_floor[id];
        for (i = 0; i &lt; current_floor[id]; i++) {
            if (target_floor[id][i] or target_up[id][i] or target_down[id][i]) {
                min_floor = i;
                return abs(floor_ - min_floor) + (current_floor[id] - min_floor);
            } 
        }
        return abs(floor_ - min_floor) + (current_floor[id] - min_floor);
    } else if (direction[id] == 0) {
        if (floor_ &gt;= current_floor[id]) {
            return floor_ - current_floor[id];
        } else {
            FLOOR max_floor = current_floor[id];
            for (i = current_floor[id]; i &lt; 4; i++) {
                if (target_floor[id][i] or target_up[id][i] or target_down[id][i]) {
                    max_floor = i;
                }
            }
            return (max_floor - current_floor[id]) + (max_floor - floor_);
        }
    }
    return 10;
}

int compute_calldown_time(ID id, FLOOR floor_) {
    if (direction[id] == 2) {
        return abs(current_floor[id] - floor_);
    } else if (direction[id] == 1) {
        if (floor_ &lt;= current_floor[id]) {
            return current_floor[id] - floor_;
        } else {
            FLOOR min_floor = current_floor[id];
            for (i = 0; i &lt; current_floor[id]; i++) {
                if (target_floor[id][i] or target_up[id][i] or target_down[id][i]) {
                    min_floor = i;
                    return abs(floor_ - min_floor) + (current_floor[id] - min_floor);
                } 
            }
            return abs(floor_ - min_floor) + (current_floor[id] - min_floor);
        }
    } else if (direction[id] == 0) {
        FLOOR max_floor = current_floor[id];
        for (i = current_floor[id]; i &lt; 4; i++) {
            if (target_floor[id][i] or target_up[id][i] or target_down[id][i]) {
                max_floor = i;
            }
        }
        return (max_floor - current_floor[id]) + (max_floor - floor_);
    }
    return 10;
}

void press(ID id, FLOOR floor_) {
    target_floor[id][floor_] = true;
}

int arrive_time1 = 0;
int arrive_time2 = 0;
ID ele_id = 0;

void call_up(FLOOR floor_) {
    if (target_up[0][floor_] or target_up[1][floor_]) {
        return;
    }
    if (target_down[0][floor_]) {
        target_up[1][floor_] = true;
        return;
    } else if (target_down[1][floor_]) {
        target_up[0][floor_] = true;
        return;
    }
    arrive_time1 = compute_callup_time(0, floor_);
    arrive_time2 = compute_callup_time(1, floor_);
    if (arrive_time1 &lt; arrive_time2) {
        ele_id = 0;
    } else {
        ele_id = 1;
    }
    target_up[ele_id][floor_] = true;
}

void call_down(FLOOR floor_) {
    if (target_down[0][floor_] or target_down[1][floor_]) {
        return;
    }
    if (target_up[0][floor_]) {
        target_down[1][floor_] = true;
        return;
    } else if (target_up[1][floor_]) {
        target_down[0][floor_] = true;
        return;
    }
    arrive_time1 = compute_calldown_time(0, floor_);
    arrive_time2 = compute_calldown_time(1, floor_);
    if (arrive_time1 &lt; arrive_time2) {
        ele_id = 0;
    } else {
        ele_id = 1;
    }
    target_down[ele_id][floor_] = true;
}</declaration>
		<location id="id22" x="-229" y="-59">
		</location>
		<location id="id23" x="51" y="-59">
			<name x="76" y="-68">Pressed</name>
			<committed/>
		</location>
		<init ref="id22"/>
		<transition id="id24">
			<source ref="id22"/>
			<target ref="id23"/>
			<label kind="select" x="-153" y="102">floor_:int[1,3]</label>
			<label kind="assignment" x="-153" y="127">call_down(floor_)</label>
			<nail x="-170" y="127"/>
			<nail x="0" y="127"/>
		</transition>
		<transition id="id25">
			<source ref="id22"/>
			<target ref="id23"/>
			<label kind="select" x="-153" y="33">floor_:int[0,2]</label>
			<label kind="assignment" x="-144" y="59">call_up(floor_)</label>
			<nail x="-170" y="59"/>
			<nail x="0" y="59"/>
		</transition>
		<transition id="id26">
			<source ref="id22"/>
			<target ref="id23"/>
			<label kind="select" x="-170" y="-34">id:ID,floor_:FLOOR</label>
			<label kind="assignment" x="-153" y="-8">press(id, floor_)</label>
			<nail x="-178" y="-8"/>
			<nail x="8" y="-8"/>
		</transition>
		<transition id="id27">
			<source ref="id22"/>
			<target ref="id23"/>
			<label kind="select" x="-119" y="-212">id:ID</label>
			<label kind="synchronisation" x="-153" y="-195">close_door[id]!</label>
			<nail x="-178" y="-170"/>
			<nail x="-9" y="-170"/>
		</transition>
		<transition id="id28">
			<source ref="id22"/>
			<target ref="id23"/>
			<label kind="select" x="-119" y="-153">id:ID</label>
			<label kind="synchronisation" x="-144" y="-136">open_door[id]!</label>
			<nail x="-178" y="-110"/>
			<nail x="0" y="-110"/>
		</transition>
		<transition id="id29">
			<source ref="id23"/>
			<target ref="id22"/>
		</transition>
	</template>
	<template>
		<name>Elevator</name>
		<parameter>const ID id</parameter>
		<declaration>clock t;

bool checkArrive(ID id, FLOOR floor_) {
    return target_floor[id][floor_] or target_up[id][floor_] or target_down[id][floor_];
}

void remove(ID id, FLOOR floor_) {
    target_floor[id][floor_] = false;
    if (target_up[id][floor_]) {
        target_up[id][floor_] = false;
    } else if (target_down[id][floor_]) {
        target_down[id][floor_] = false;
    }
}</declaration>
		<location id="id30" x="-357" y="-59">
			<name x="-442" y="-68">Floor_b</name>
		</location>
		<location id="id31" x="0" y="-59">
			<name x="-85" y="-67">Floor_1</name>
		</location>
		<location id="id32" x="391" y="-51">
			<name x="306" y="-59">Floor_2</name>
		</location>
		<location id="id33" x="680" y="-51">
			<name x="705" y="-59">Floor_3</name>
		</location>
		<location id="id34" x="-238" y="-161">
			<name x="-297" y="-195">up_b</name>
			<label kind="invariant" x="-289" y="-170">t&lt;=1</label>
		</location>
		<location id="id35" x="136" y="-161">
			<name x="119" y="-195">up_1</name>
			<label kind="invariant" x="119" y="-144">t&lt;=1</label>
		</location>
		<location id="id36" x="272" y="-161">
			<name x="229" y="-195">check_1to2</name>
			<committed/>
		</location>
		<location id="id37" x="-110" y="-161">
			<name x="-144" y="-195">check_bto1</name>
			<committed/>
		</location>
		<location id="id38" x="535" y="-161">
			<name x="552" y="-195">up_2</name>
			<label kind="invariant" x="552" y="-170">t&lt;=1</label>
		</location>
		<location id="id39" x="603" y="51">
			<name x="620" y="34">down_3</name>
			<label kind="invariant" x="620" y="51">t&lt;=1</label>
		</location>
		<location id="id40" x="476" y="51">
			<name x="476" y="59">check_3to2</name>
			<committed/>
		</location>
		<location id="id41" x="272" y="51">
			<name x="229" y="59">down_2</name>
			<label kind="invariant" x="246" y="76">t&lt;=1</label>
		</location>
		<location id="id42" x="127" y="51">
			<name x="85" y="68">check_2to1</name>
			<committed/>
		</location>
		<location id="id43" x="-178" y="51">
			<name x="-204" y="59">down_1</name>
			<label kind="invariant" x="-195" y="76">t&lt;=1</label>
		</location>
		<init ref="id31"/>
		<transition id="id44">
			<source ref="id43"/>
			<target ref="id30"/>
			<label kind="synchronisation" x="-408" y="-17">open_door[id]!</label>
			<label kind="assignment" x="-425" y="8">current_floor[id]=0,status[id]=2,remove(id,0),t=0</label>
		</transition>
		<transition id="id45">
			<source ref="id42"/>
			<target ref="id43"/>
			<label kind="guard" x="-119" y="51">!checkArrive(id,1)</label>
			<label kind="assignment" x="-127" y="68">current_floor[id]=1,t=0</label>
		</transition>
		<transition id="id46">
			<source ref="id31"/>
			<target ref="id43"/>
			<label kind="synchronisation" x="-144" y="-42">down[id]?</label>
			<label kind="assignment" x="-153" y="-17">status[id]=1,t=0</label>
		</transition>
		<transition id="id47">
			<source ref="id42"/>
			<target ref="id31"/>
			<label kind="guard" x="51" y="-42">checkArrive(id,1)</label>
			<label kind="synchronisation" x="76" y="-17">open_door[id]!</label>
			<label kind="assignment" x="-76" y="25">current_floor[id]=1,status[id]=2,remove(id,1),t=0</label>
		</transition>
		<transition id="id48">
			<source ref="id41"/>
			<target ref="id42"/>
			<label kind="guard" x="170" y="51">t&gt;=1</label>
			<label kind="assignment" x="178" y="68">t=0</label>
		</transition>
		<transition id="id49">
			<source ref="id32"/>
			<target ref="id41"/>
			<label kind="synchronisation" x="229" y="-34">down[id]?</label>
			<label kind="assignment" x="204" y="-17">status[id]=1,t=0</label>
		</transition>
		<transition id="id50">
			<source ref="id40"/>
			<target ref="id41"/>
			<label kind="guard" x="289" y="51">!checkArrive(id,2)</label>
			<label kind="assignment" x="289" y="68">current_floor[id]=2,t=0</label>
		</transition>
		<transition id="id51">
			<source ref="id40"/>
			<target ref="id32"/>
			<label kind="guard" x="425" y="-42">checkArrive(id,2)</label>
			<label kind="synchronisation" x="442" y="-17">open_door[id]!</label>
			<label kind="assignment" x="323" y="8">current_floor[id]=2,status[id]=2,remove(id,2),t=0</label>
		</transition>
		<transition id="id52">
			<source ref="id39"/>
			<target ref="id40"/>
			<label kind="guard" x="552" y="51">t&gt;=1</label>
			<label kind="assignment" x="561" y="68">t=0</label>
		</transition>
		<transition id="id53">
			<source ref="id33"/>
			<target ref="id39"/>
			<label kind="synchronisation" x="671" y="-34">down[id]?</label>
			<label kind="assignment" x="654" y="-17">status[id]=1,t=0</label>
		</transition>
		<transition id="id54">
			<source ref="id38"/>
			<target ref="id33"/>
			<label kind="synchronisation" x="620" y="-119">open_door[id]!</label>
			<label kind="assignment" x="450" y="-102">current_floor[id]=3,status[id]=2,remove(id,3),t=0</label>
		</transition>
		<transition id="id55">
			<source ref="id36"/>
			<target ref="id38"/>
			<label kind="guard" x="323" y="-195">!checkArrive(id,2)</label>
			<label kind="assignment" x="306" y="-178">current_floor[id]=2,t=0</label>
		</transition>
		<transition id="id56">
			<source ref="id32"/>
			<target ref="id38"/>
			<label kind="synchronisation" x="399" y="-144">up[id]?</label>
			<label kind="assignment" x="365" y="-119">status[id]=0,t=0</label>
		</transition>
		<transition id="id57">
			<source ref="id37"/>
			<target ref="id35"/>
			<label kind="guard" x="-51" y="-195">!checkArrive(id,1)</label>
			<label kind="assignment" x="-85" y="-178">current_floor[id]=1,t=0</label>
		</transition>
		<transition id="id58">
			<source ref="id36"/>
			<target ref="id32"/>
			<label kind="guard" x="178" y="-136">checkArrive(id,2)</label>
			<label kind="synchronisation" x="187" y="-110">open_door[id]!</label>
			<label kind="assignment" x="102" y="-85">current_floor[id]=2,status[id]=2,remove(id,2),t=0</label>
		</transition>
		<transition id="id59">
			<source ref="id35"/>
			<target ref="id36"/>
			<label kind="guard" x="178" y="-204">t&gt;=1</label>
			<label kind="assignment" x="187" y="-187">t=0</label>
		</transition>
		<transition id="id60">
			<source ref="id31"/>
			<target ref="id35"/>
			<label kind="synchronisation" x="-8" y="-144">up[id]?</label>
			<label kind="assignment" x="-8" y="-119">status[id]=0,t=0</label>
		</transition>
		<transition id="id61">
			<source ref="id37"/>
			<target ref="id31"/>
			<label kind="guard" x="-195" y="-136">checkArrive(id,1)</label>
			<label kind="synchronisation" x="-178" y="-110">open_door[id]!</label>
			<label kind="assignment" x="-323" y="-93">current_floor[id]=1,status[id]=2,remove(id,1),t=0</label>
		</transition>
		<transition id="id62">
			<source ref="id34"/>
			<target ref="id37"/>
			<label kind="guard" x="-204" y="-204">t&gt;=1</label>
			<label kind="assignment" x="-195" y="-187">t=0</label>
		</transition>
		<transition id="id63">
			<source ref="id30"/>
			<target ref="id34"/>
			<label kind="synchronisation" x="-408" y="-136">up[id]?</label>
			<label kind="assignment" x="-442" y="-110">status[id]=1,t=0</label>
		</transition>
	</template>
	<template>
		<name x="5" y="5">ElevatorDoor</name>
		<parameter>const ID id</parameter>
		<declaration>// Place local declarations here.
clock t;
int door_outside_length;
int open_timer;

bool isfree(int id) {
    return not (status[id] == 0 or status[id] == 1);
}</declaration>
		<location id="id64" x="-229" y="-127">
			<name x="-331" y="-170">stopped_door_closed</name>
		</location>
		<location id="id65" x="51" y="-127">
			<name x="59" y="-170">stopped_opening_door</name>
			<label kind="invariant" x="68" y="-119">t&lt;=1</label>
		</location>
		<location id="id66" x="-229" y="93">
			<name x="-408" y="59">stopped_closing_door</name>
			<label kind="invariant" x="-272" y="102">t&lt;=1</label>
		</location>
		<location id="id67" x="51" y="93">
			<name x="59" y="59">stopped_door_opened</name>
			<label kind="invariant" x="59" y="102">t&lt;=1</label>
		</location>
		<init ref="id64"/>
		<transition id="id68">
			<source ref="id65"/>
			<target ref="id65"/>
			<label kind="guard" x="-8" y="-272">t&gt;=1 &amp;&amp; door_outside_length&gt;0</label>
			<label kind="assignment" x="-76" y="-255">t=0, door_outside_length=door_outside_length - 1</label>
			<nail x="153" y="-127"/>
			<nail x="153" y="-229"/>
			<nail x="51" y="-229"/>
		</transition>
		<transition id="id69">
			<source ref="id66"/>
			<target ref="id66"/>
			<label kind="guard" x="-391" y="187">t&gt;=1 &amp;&amp; door_outside_length&lt;2</label>
			<label kind="assignment" x="-433" y="204">t=0, door_outside_length=door_outside_length+1</label>
			<nail x="-229" y="178"/>
			<nail x="-340" y="178"/>
			<nail x="-340" y="93"/>
		</transition>
		<transition id="id70">
			<source ref="id67"/>
			<target ref="id67"/>
			<label kind="guard" x="17" y="187">t&gt;=1 &amp;&amp; open_timer &gt; 0</label>
			<label kind="assignment" x="-8" y="204">t=0, open_timer=open_timer-1</label>
			<nail x="161" y="93"/>
			<nail x="161" y="178"/>
			<nail x="51" y="178"/>
		</transition>
		<transition id="id71">
			<source ref="id67"/>
			<target ref="id66"/>
			<label kind="guard" x="-153" y="119">open_timer==0</label>
			<label kind="assignment" x="-110" y="136">t=0</label>
			<nail x="25" y="118"/>
			<nail x="-204" y="118"/>
		</transition>
		<transition id="id72">
			<source ref="id66"/>
			<target ref="id65"/>
			<label kind="synchronisation" x="-178" y="-59">open_door[id]?</label>
			<label kind="assignment" x="-127" y="-34">t=0</label>
		</transition>
		<transition id="id73">
			<source ref="id67"/>
			<target ref="id66"/>
			<label kind="synchronisation" x="-136" y="51">close_door[id]?</label>
			<label kind="assignment" x="-110" y="68">t=0</label>
		</transition>
		<transition id="id74">
			<source ref="id65"/>
			<target ref="id67"/>
			<label kind="guard" x="59" y="-42">door_outside_length==0</label>
			<label kind="assignment" x="59" y="-17">t=0, open_timer=5</label>
		</transition>
		<transition id="id75">
			<source ref="id64"/>
			<target ref="id65"/>
			<label kind="guard" x="-136" y="-170">isfree(id)</label>
			<label kind="synchronisation" x="-153" y="-153">open_door[id]?</label>
			<label kind="assignment" x="-204" y="-119">t=0, door_outside_length=2</label>
		</transition>
		<transition id="id76">
			<source ref="id66"/>
			<target ref="id64"/>
			<label kind="guard" x="-425" y="-42">door_outside_length==2</label>
			<label kind="assignment" x="-272" y="-17">t=0</label>
		</transition>
	</template>
	<system>system SystemProcessor, User, Elevator, ElevatorDoor;
</system>
	<queries>
		<query>
			<formula>E&lt;&gt; Elevator(0).Floor_3</formula>
			<comment/>
			<result outcome="success" type="quality" timestamp="2024-06-23 23:08:08 +0800">
			</result>
		</query>
		<query>
			<formula>E&lt;&gt; Elevator(0).Floor_2</formula>
			<comment/>
			<result outcome="success" type="quality" timestamp="2024-06-23 23:09:16 +0800">
			</result>
		</query>
		<query>
			<formula>E&lt;&gt; Elevator(0).Floor_b</formula>
			<comment/>
			<result outcome="success" type="quality" timestamp="2024-06-23 23:36:19 +0800">
			</result>
		</query>
		<query>
			<formula>E&lt;&gt; ElevatorDoor(1).stopped_door_opened</formula>
			<comment/>
			<result outcome="success" type="quality" timestamp="2024-06-23 23:05:44 +0800">
			</result>
		</query>
	</queries>
</nta>
